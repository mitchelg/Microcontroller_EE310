//-----------------------------
// Title: 7-Segment Display
//-----------------------------
// Purpose: This program uses a 7-segment display to display an incrementing or decrementing number
// depending on what button is being pressed.
// Dependencies: AssemblyConfig.inc - Configuration file for PIC18F46K42
// Compiler: pic-as v2.46
// Author: Garry Mitchell
// OUTPUTS: RA[7:0]
// INPUTS: RD1, RD0
// Versions:
// V0.1: File created
// V1.0: Added comment header, initialization
// V1.1: Added constants and definitions, organization
// V2.1: Added pressed-button behavior, value comparisons, more initialization
// V2.2: Added indirect addressing, improved organization and formatting
// V2.3: Added delay loop
// V2.3.1: Removed testing code, organization

//-----------------------------
    
    
//Initialization:
    #include "C:\Users\garre\Desktop\Library\8. School\5. Spring 2024\EE 310\Assignment 6B - 7 Segment\7SegDisplay.X\AssemblyConfig.inc"
    #include <xc.inc>
    
    PSECT absdata,abs,ovrld
    
    displayReg EQU	0x60
    numberReg EQU	0x30
    resetReg EQU	0x42
    outerLoop EQU	0x50
    innerLoop EQU	0x51

    REG00 EQU		0x00
    REG01 EQU		0x01
    REG02 EQU		0x02
    REG03 EQU		0x03
    REG04 EQU		0x04
    REG05 EQU		0x05
    REG06 EQU		0x06
    REG07 EQU		0x07
    REG08 EQU		0x08
    REG09 EQU		0x09
    REG0A EQU		0x0A
    REG0B EQU		0x0B
    REG0C EQU		0x0C
    REG0D EQU		0x0D
    REG0E EQU		0x0E
    REG0F EQU		0x0F
 
 
    #define upButton	PORTD,0
    #define downButton	PORTD,1

    #define num0    0x3F
    #define num1    0x06
    #define num2    0x5B
    #define num3    0x4F
    #define num4    0x66
    #define num5    0x6D
    #define num6    0x7D
    #define num7    0x07
    #define num8    0x7F
    #define num9    0x6F
    #define numA    0x77
    #define numB    0x7C
    #define numC    0x58
    #define numD    0x5E
    #define numE    0x79
    #define numF    0x71

    ORG          0h
    GOTO        _initialize
    ORG          20h
    
    
_initialize:
    BANKSEL	PORTA
    CLRF	PORTA		
    BANKSEL	ANSELA
    CLRF	ANSELA
    BANKSEL	TRISA
    MOVLW	0x00
    MOVWF	TRISA
    
    BANKSEL	PORTD
    CLRF	PORTD		
    BANKSEL	ANSELD
    CLRF	ANSELD
    BANKSEL	TRISD
    MOVLW	0x03
    MOVWF	TRISD
    MOVLW	0x00
    MOVWF	STATUS
    
    MOVLW	num0
    MOVWF	REG00
    MOVLW	num1
    MOVWF	REG01
    MOVLW	num2
    MOVWF	REG02
    MOVLW	num3
    MOVWF	REG03
    MOVLW	num4
    MOVWF	REG04
    MOVLW	num5
    MOVWF	REG05
    MOVLW	num6
    MOVWF	REG06
    MOVLW	num7
    MOVWF	REG07
    MOVLW	num8
    MOVWF	REG08
    MOVLW	num9
    MOVWF	REG09
    MOVLW	numA
    MOVWF	REG0A
    MOVLW	numB
    MOVWF	REG0B
    MOVLW	numC
    MOVWF	REG0C
    MOVLW	numD
    MOVWF	REG0D
    MOVLW	numE
    MOVWF	REG0E
    MOVLW	numF
    MOVWF	REG0F
    
    CLRF	numberReg
    GOTO	_compareLoopStart
    
    
_start:
    MOVF	upButton,W
    ANDWF	downButton,0	;up and down pressed? logical AND resut saved to WREG, move to 0x42 (resetReg)
    MOVWF	resetReg
    MOVLW	0x00
    MOVWF	STATUS
    BTFSC	resetReg,0
    CLRF	numberReg
    BZ		_bitClear	;branch if numReg gets cleared to 0
    
    BTFSC	upButton,0
    INCF	numberReg
    BTFSC	downButton,0
    DECF	numberReg
    GOTO	_bitClear
    

_bitClear:
    BCF		numberReg,7
    BCF		numberReg,6
    BCF		numberReg,5
    BCF		numberReg,4
    GOTO	_compareLoopStart
    
    
_compareLoopStart:
    MOVLW	0x00
    CPFSEQ	numberReg
    GOTO	_compareLoop
    GOTO	_numChange
_compareLoop:
    INCF	WREG
    CPFSEQ	numberReg
    GOTO	_compareLoop
    GOTO	_numChange
    
    
_numChange:
    MOVWF	FSR0
    MOVFF	INDF0,displayReg
    GOTO	_delayStart
    
    
_delayStart:
    MOVLW   0xFF
    MOVWF   outerLoop
    MOVFF   outerLoop,innerLoop
_delayInner:
    DECF    innerLoop
    BZ	    _delayOuter
    GOTO    _delayInner
_delayOuter:
    DECF    outerLoop
    BZ	    _start
    GOTO    _delayInner
