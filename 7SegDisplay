//-----------------------------
// Title: 7-Segment Display
//-----------------------------
// Purpose: This program uses a 7-segment display to display an incrementing or decrementing number
// depending on what button is being pressed.
// Dependencies: AssemblyConfig.inc - Configuration file for PIC18F46K42
// Compiler: pic-as v2.46
// Author: Garry Mitchell
// OUTPUTS: RA[7:0]
// INPUTS: RD1, RD0
// Versions:
// V0.1: File created
// V1.0: Added comment header, initialization
// V1.1: Added constants and definitions, organization
// V2.1: Added pressed-button behavior, value comparisons, more initialization

//-----------------------------
    
    
//Initialization:
    #include "C:\Users\garre\Desktop\Library\8. School\5. Spring 2024\EE 310\Assignment 6B - 7 Segment\7SegDisplay.X\AssemblyConfig.inc"
    #include <xc.inc>
    
    PSECT absdata,abs,ovrld
    
    displayReg EQU	PORTA
    numberReg EQU	0x30
    testReg1 EQU	0x40
    testReg2 EQU	0x41
    resetReg EQU	0x42
    #define upButton	PORTD,0
    #define downButton	PORTD,1

    #define num0    0x3F
    #define num1    0x06
    #define num2    0x5B
    #define num3    0x4F
    #define num4    0x66
    #define num5    0x6D
    #define num6    0x7D
    #define num7    0x07
    #define num8    0x7F
    #define num9    0x6F
    #define numA    0x77
    #define numB    0x7C
    #define numC    0x58
    #define numD    0x5E
    #define numE    0x79
    #define numF    0x71

    ORG          0h
    GOTO        _initialize
    ORG          20h
    
_initialize:
    BANKSEL	PORTA
    CLRF	PORTA		
    BANKSEL	ANSELA
    CLRF	ANSELA
    BANKSEL	TRISA
    MOVLW	0x00
    MOVWF	TRISA
    
    BANKSEL	PORTD
    CLRF	PORTD		
    BANKSEL	ANSELD
    CLRF	ANSELD
    BANKSEL	TRISD
    MOVLW	0x03
    MOVWF	TRISD
    
    CLRF	numberReg
    MOVLW	0x00
    MOVWF	STATUS
    GOTO	_start
    
_start:
    MOVLW   0x00
    MOVWF   testReg1
    MOVLW   0x01
    MOVWF   testReg2	     ;testReg1 = upButton, testReg2 = downButton
    MOVLW   0x00
    MOVWF   numberReg
   
    MOVF	testReg1,W
    ANDWF	testReg2,0	;up and down pressed? logical AND resut saved to WREG, move to 0x42 (resetReg)
    MOVWF	resetReg
    MOVLW	0x00
    MOVWF	STATUS
    BTFSC	resetReg,0
    CLRF	numberReg
    BZ		_numChange	;branch if numReg gets cleared to 0
    
    BTFSC	testReg1,0
    INCF	numberReg
    BTFSC	testReg2,0
    DECF	numberReg
    GOTO	_numChange
    

_numChange:
    BCF		numberReg,7
    BCF		numberReg,6
    BCF		numberReg,5
    BCF		numberReg,4
    
